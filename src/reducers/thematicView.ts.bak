// Copyright CESSDA ERIC 2017-2023
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { createSlice } from "@reduxjs/toolkit";
import { ThematicView, thematicViews, esIndex } from "../utilities/thematicViews";

export interface ThematicViewState {
  currentThematicView: ThematicView;
  list: readonly ThematicView[];
}

const initialState: ThematicViewState = {
  currentThematicView: thematicViews.find((l) => l.path === "/") as ThematicView,
  list: thematicViews
};

const thematicViewSlice = createSlice({
  name: "thematicView",
  initialState: initialState,
  reducers: {
    updateThematicView: (state, action) => {
      let path = action.payload;
      const thematicView = thematicViews.find(element => element.path === path);
      let title: string;
      let key: string;
      let longTitle: string;
      let rootClass: string;
      let defaultIndex: string;
      let logo: string;
      let icon: string;
      let favicon: string;
      let esIndexes: Array<esIndex>;
            
 

      if (!thematicView) {
        path = "/";
        title = thematicViews.find(element => element.path === path)?.title || '';
        key = thematicViews.find(element => element.path === path)?.key || '';
        longTitle = thematicViews.find(element => element.path === path)?.longTitle || '';
        rootClass = thematicViews.find(element => element.path === path)?.rootClass || '';
        defaultIndex = thematicViews.find(element => element.path === path)?.defaultIndex || '';
        logo = thematicViews.find(element => element.path === path)?.logo || '';
        icon = thematicViews.find(element => element.path === path)?.icon || '';
        favicon = thematicViews.find(element => element.path === path)?.favicon || '';
        esIndexes = thematicViews.find(element => element.path === path)?.esIndexes || [];           
        
      } else {
        path = thematicView.path;
        title = thematicViews.find(element => element.path === path)?.title || '';
        key = thematicViews.find(element => element.path === path)?.key || '';
        longTitle = thematicViews.find(element => element.path === path)?.longTitle || '';
        rootClass = thematicViews.find(element => element.path === path)?.rootClass || '';
        defaultIndex = thematicViews.find(element => element.path === path)?.defaultIndex || '';
        logo = thematicViews.find(element => element.path === path)?.logo || '';
        icon = thematicViews.find(element => element.path === path)?.icon || '';
        favicon = thematicViews.find(element => element.path === path)?.favicon || '';  
        esIndexes = thematicViews.find(element => element.path === path)?.esIndexes || [];    
      }
            state.currentThematicView = {key: key, title: title, path: path, longTitle: longTitle, rootClass: rootClass, defaultIndex: defaultIndex, logo: logo, icon: icon, favicon: favicon, esIndexes: esIndexes};
    },
  }
});

export const { updateThematicView } = thematicViewSlice.actions;

export default thematicViewSlice.reducer;

// import { Action } from "../actions";
// import { CHANGE_LANGUAGE, INIT_TRANSLATIONS } from "../actions/language";
// import { languages, Language } from "../utilities/language";

// export interface LanguageState {
//   currentLanguage: Language;
//   list: readonly Language[];
// }

// const initialState: LanguageState = {
//   currentLanguage: languages.find((l) => l.code === "en") as Language,
//   list: [],
// };

// const languageReducer = (
//   state: LanguageState = initialState,
//   action: Action
// ) => {
//   switch (action.type) {
//     case INIT_TRANSLATIONS:
//       return Object.assign({}, state, {
//         currentLanguage:
//           languages.find((l) => l.code === action.initialLanguage) ||
//           initialState.currentLanguage,
//         list: action.languages,
//       });

//     case CHANGE_LANGUAGE:
//       return Object.assign({}, state, {
//         currentLanguage:
//           languages.find((l) => l.code === action.code) ||
//           initialState.currentLanguage,
//         label: action.label,
//       });

//     default:
//       return state;
//   }
// };

// export default languageReducer;
